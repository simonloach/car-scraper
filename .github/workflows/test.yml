name: 🧪 Tests

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  code-quality:
    name: 🔍 Code Quality & Pre-commit
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: 🔧 Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: 📚 Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: 🔨 Install project
      run: poetry install --no-interaction

    - name: 🔍 Run pre-commit hooks
      run: |
        poetry run pre-commit run --all-files --show-diff-on-failure

  unit-tests:
    name: 🔬 Unit & Integration Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: 🔧 Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: 📚 Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: 🔨 Install project
      run: poetry install --no-interaction

    - name: 🧪 Run unit and integration tests
      run: |
        poetry run pytest -v --tb=short

    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pytest-results
        path: .pytest_cache/

  e2e-tests:
    name: 🚀 End-to-End Tests
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: 📦 Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: 🔧 Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: 📚 Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: 🔨 Install project
      run: poetry install --no-interaction

    - name: 🚀 Run E2E tests
      run: |
        chmod +x scripts/test_e2e_manual.sh
        ./scripts/test_e2e_manual.sh

    - name: 📊 Upload E2E test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-artifacts
        path: |
          data_test_e2e/
          plots/
          *.log

  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, e2e-tests]
    if: always()

    steps:
    - name: ✅ Check all jobs succeeded
      run: |
        if [ "${{ needs.code-quality.result }}" != "success" ] || [ "${{ needs.unit-tests.result }}" != "success" ] || [ "${{ needs.e2e-tests.result }}" != "success" ]; then
          echo "❌ One or more jobs failed:"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          exit 1
        fi
        echo "🎉 All CI checks passed successfully!"
